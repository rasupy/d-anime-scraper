name: Build and Release (PyInstaller)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write # リリース作成に必要

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (minimal)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # dev/optional dependencies (lint, test)
          pip install .[dev]

      - name: Lint (ruff)
        run: |
          ruff check .

      - name: Type check (mypy)
        if: runner.os == 'Linux'
        run: |
          mypy . || true  # 型警告は現状ブロックしない (調整可能)

      - name: Run tests (pytest)
        run: |
          pytest -q || (echo "Tests failed" && exit 1)

      - name: Build (PyInstaller)
        shell: bash
        run: |
          # spec ファイルを利用 (UPX 無効化済み)
          pyinstaller -y d_anime_scraper.spec
          # Windows 向けに one-dir 形式 (フォルダ配布) も作成 (heuristic 誤検知低減)
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pyinstaller --noconsole gui_launcher.py -n d_anime_scraper_folder --clean --noupx
            printf '%s\n' \
              'ダウンロード後の利用手順:' \
              '1. このフォルダ一式を任意の場所へ配置 (例: C:\tools\d_anime_scraper)' \
              '2. フォルダ内 d_anime_scraper_folder.exe をダブルクリック' \
              '3. OUT/ 日付フォルダ内に CSV / 画像 が生成されます' \
              '4. 0 件だった場合は Playwright を導入して再実行:' \
              '   pip install playwright && playwright install chromium' \
              '' \
              '環境変数 D_ANIME_SCRAPER_OUT_DIR で出力先の親を変更可能です。' \
              > dist/d_anime_scraper_folder/INSTRUCTIONS_ja.txt
          fi
      - name: Zip onedir (Windows only)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path dist/d_anime_scraper_folder) { Compress-Archive -Path dist/d_anime_scraper_folder -DestinationPath dist/d_anime_scraper_folder.zip -Force }
          echo "SHA256 (Linux/Windows build if both present):"
          if [ -f dist/d_anime_scraper ]; then sha256sum dist/d_anime_scraper; fi
          if [ -f dist/d_anime_scraper.exe ]; then sha256sum dist/d_anime_scraper.exe; fi

      - name: Archive binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: d_anime_scraper-${{ runner.os }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist_all
      - name: Display structure
        run: ls -R dist_all
      - name: Prepare release assets
        run: |
          mkdir upload
          cp dist_all/d_anime_scraper-Windows/d_anime_scraper.exe upload/ || true
          cp dist_all/d_anime_scraper-Linux/d_anime_scraper upload/ || true
          cp dist_all/d_anime_scraper-Windows/d_anime_scraper_folder.zip upload/ || true
          # ハッシュファイル生成
          (cd upload && for f in *; do [ -f "$f" ] && sha256sum "$f" > "$f.sha256"; done)
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            upload/d_anime_scraper.exe
            upload/d_anime_scraper
            upload/d_anime_scraper_folder.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
